MaximalSquare.h:

void findMaximalSquare(int** matrix, int rows, int cols, int* maxEdge);
int min(int a, int b, int c);

MaximalSquare.c:

#include "MaximalSquare.h"
#include <stdlib.h>
#include <stdio.h>

int min(int a, int b, int c) {
	if (a <= b && a <= c) {
		return a;
	}
	else if (b <= a && b <= c) {
		return b;
	}
	else if (c <= a && c <= b) {
		return c;
	}
}

void findMaximalSquare(int** matrix, int rows, int cols, int* maxEdge) {
	int row = rows + 1, col = cols + 1;
	int** dp = (int**)malloc(sizeof(int*) * (row));
	for (int i = 0; i < row; i++) {
		dp[i] = (int*)malloc(sizeof(int) * (col));
	}

	for (int i = 0; i < row; i++) {
		for (int j = 0; j < col; j++) {
			dp[i][j] = matrix[i][j];
		}
	}


	for (int i = 1; i < row; i++) {
		for (int j = 1; j < col; j++) {
			if (matrix[i][j] == 1) {
				dp[i][j] = min(dp[i - 1][j], dp[i - 1][j - 1], dp[i][j - 1]) + 1;
				if (*maxEdge < dp[i][j]) {
					*maxEdge = dp[i][j];
				}
			}
		}
	}


	for (int i = 0; i < row; i++) {
		free(dp[i]);
	}
	free(dp);
}
